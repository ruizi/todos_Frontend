{"version":3,"sources":["utils/setHttpReqHeader.tsx","redux/actions/types.tsx","redux/actions/MessageAction.tsx","redux/actions/todoItemAction.tsx","redux/actions/authAction.tsx","components/layout/NavBar.tsx","theme/myTheme.tsx","components/layout/SideBar.tsx","components/layout/DashboardLayout.tsx","components/layout/LandingPageLayout.tsx","assets/imgs/landingBackground.jpeg","views/auth/WelcomePage.tsx","views/auth/LoginPage.tsx","views/auth/RegisterPage.tsx","redux/actions/todoGroupsAction.tsx","views/todos/todoGroup/TodoGroupList.tsx","views/todos/todoGroup/TodoGroupDetails.tsx","views/todos/todoGroup/TodoGroupAdd.tsx","views/todos/todoGroup/TodoGroupsManage.tsx","views/account/UserAccount.tsx","views/utilpages/PageNotFound.tsx","views/account/UserSettings.tsx","views/utilpages/HelpPage.tsx","views/todos/todoList/TodoListModule.tsx","views/todos/todoList/AddNewTodoItemModule.tsx","views/todos/todoList/TodoItemDetailsModule.tsx","views/todos/todoList/TodoListLayout.tsx","components/routes/routes.tsx","components/layout/Message.tsx","App.tsx","reportWebVitals.ts","redux/reducers/AuthReducer.tsx","redux/reducers/TodoReducer.tsx","redux/reducers/MessageReducer.ts","redux/store/AppState.tsx","redux/store/configureStore.tsx","index.tsx"],"names":["setHttpReqHeaderWithToken","token","axios","defaults","headers","common","AUTH_ERROR","USER_PROFILE_LOADED","LOGIN_SUCCESS","REGISTER_FAIL","REGISTER_SUCCESS","LOG_OUT","CLEAR_TODO","TODO_INFO_LOADED","TODO_UPDATE_ERROR","TODO_UPDATE_SUCCESS","UPDATE_DETAILS","DELETE_A_GROUP","TODO_ADD_SUCCESS","TODO_GROUP_ADD_SUCCESS","TODO_GROUP_ADD_ERROR","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","message","alertType","dispatch","timeout","id","uuid","type","payload","setTimeout","loadTodos","a","localStorage","get","response","todoGroups","data","todoGroup","todoItemDetails","todoList","push","updateATodoItem","todoItem","reqBodyContent","JSON","stringify","put","addATodoItem","newTodoItem","post","deleteATodoItem","todoItemId","delete","loadUser","userInfo","then","console","log","register","email","username","password","login","responseForToken","responseForProfile","status","msg","statusText","logout","useStyles","makeStyles","theme","createStyles","root","flexGrow","title","display","appBar","backgroundColor","boxShadow","position","width","paddingTop","zIndex","drawer","toolBar","paddingLeft","button","color","textTransform","NavBar","props","useSelector","state","auth","isAuthed","loading","useState","notifications","classes","useDispatch","privateLinks","IconButton","Badge","badgeContent","length","variant","onClick","publicLinks","Button","component","RouterLink","className","to","Typography","AppBar","Toolbar","Link","style","Hidden","smDown","mdUp","onMobileNavOpen","createMuiTheme","palette","primary","main","contrastText","background","default","paper","colors","white","text","secondary","typography","h1","fontWeight","fontSize","letterSpacing","h2","h3","h4","h5","h6","overline","functionItems","href","icon","LayersIcon","systemItems","UserIcon","SettingsIcon","LogOutIcon","AlertCircleIcon","flexShrink","anchor","drawerPaper","content","padding","spacing","drawBox","flexDirection","height","profileBox","alignItems","p","Avatar","cursor","toolbar","mixins","sideBarButtons","menuBox","paperProps","top","SideBar","authInfo","todo","location","useLocation","useEffect","openMobile","onMobileClose","pathname","user","avatar","profile","jobTitle","name","todoGroupItems","groupBtn","_id","groupName","CalendarIcon","CommandIcon","DataBaseIcon","authContent","Box","src","Divider","List","map","item","ListItem","ListItemIcon","size","ListItemText","unAuthContent","index","marginTop","implementation","Drawer","direction","onClose","open","ModalProps","keepMounted","protoType","PropTypes","func","bool","defaultProps","DashboardLayoutRoot","overflow","minWidth","DashboardLayoutWrapper","flex","breakpoints","up","DashboardLayoutContainer","DashboardLayoutContent","DashboardLayout","isMobileNavOpen","setMobileNavOpen","LandingLayoutRoot","LandingLayoutWrapper","LandingLayoutContainer","LandingLayoutContent","LandingPageLayout","landingSection","backgroundImage","image","backgroundSize","backgroundPosition","justifyContent","mainContent","inner","margin","textAlign","lineHeight","marginBottom","subTitle","buttons","WelcomePage","loginSection","innerBox","inputCard","opacity","cardContent","forgetAndRegister","LoginPage","todos","userEmail","setUserEmail","userPassword","setUserPassword","submitInput","event","preventDefault","Helmet","Grid","xl","lg","md","sm","xs","Card","onSubmit","CardHeader","align","CardContent","TextField","label","required","InputProps","startAdornment","InputAdornment","onChange","target","value","placeholder","registerSection","RegisterPage","userName","setUserName","registerStatus","setRegisterStatus","AccountCircle","addAGroup","updateAGroup","updatedGroup","deleteAGroup","card","list","paddingBottom","maxHeight","TodoGroupList","toggleTodoGroupDetailDrawer","divider","ListItemAvatar","ListItemSecondaryAction","inputBox","minHeight","TodoGroupDetails","todoGroupDetail","updatedTodoGroup","setUpdatedTodoGroup","action","container","fullWidth","SvgIcon","Fingerprint","disabled","BubbleChart","isFinished","textDecorationLine","Checkbox","edge","checked","TodoGroupAdd","newTodoGroupName","setNewTodoGroupName","Face","float","pageContent","mainComponent","leftPart","rightPart","cards","paddingBox","itemDetailBox","TodoGroupsManage","React","openDrawer","setOpenDrawer","setTodoGroupDetail","_todoGroupDetail","undefined","SwipeableDrawer","onOpen","role","UserAccount","PageNotFound","UserSettings","HelpPage","TodoListModule","toggleDrawer","setChecked","handleToggle","currentIndex","indexOf","newChecked","splice","error","showDetails","btnGroup","AddNewTodoItemModule","Date","selectedDate","setSelectedDate","initialInputBox","repeatCircle","scheduleAt","toISOString","description","groupId","setNewTodoItem","resetInputBox","handleDateChange","date","Title","ShortText","select","SelectProps","native","InputLabelProps","shrink","defaultValue","arr","repeatOption","buildOptions","disableToolbar","format","KeyboardButtonProps","multiline","rows","TodoItemDetailsModule","todoItemDetail","updateTodoItem","setUpdateTodoItem","TodoListLayout","setTodoItemDetail","params","useParams","filter","key","routes","path","element","children","Message","_messages","messages","enqueueSnackbar","useSnackbar","preventDuplicate","App","routingPath","useRoutes","ThemeProvider","utils","DateFnsUtils","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialAuthState","getItem","initialTodoGroupsState","initialMessageState","messageArray","rootReducer","combineReducers","setItem","removeItem","updatedTodoItem","newTodoGroups","group","newTodoList","msgObj","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.111bd627.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const setHttpReqHeaderWithToken = (token: string) => {\n    if (token) {\n        axios.defaults.headers.common[\"x-auth-token\"] = token;\n    } else {\n        delete axios.defaults.headers.common[\"x-auth-token\"];\n    }\n}\n\nexport const sendDateAxisConfig = () => {\n    return {\n        //define the http post config\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    }\n}\n","export const AUTH_ERROR = \"AUTH_ERROR\";\nexport const USER_PROFILE_LOADED = \"USER_PROFILE_LOADED\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const REGISTER = \"REGISTER\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const LOG_OUT = \"LOG_OUT\";\nexport const CLEAR_TODO = \"CLEAR_TODO\";\nexport const TODO_INFO_LOADED = \"TODO_INFO_LOADED\";\nexport const TODO_UPDATE_ERROR = \"TODO_UPDATE_ERROR\";\nexport const TODO_UPDATE_SUCCESS = \"TODO_UPDATE_SUCCESS\";\nexport const UPDATE_DETAILS = \"UPDATE_DETAILS\";\n\nexport const DELETE_A_GROUP = \"DELETE_A_GROUP\";\nexport const TODO_ADD_ERROR = \"TODO_ADD_ERROR\";\nexport const TODO_ADD_SUCCESS = \"TODO_ADD_SUCCESS\";\n\nexport const TODO_GROUP_ADD_SUCCESS = \"TODO_GROUP_ADD_SUCCESS\";\nexport const TODO_GROUP_ADD_ERROR = \"TODO_GROUP_ADD_ERROR\";\nexport const TODO_GROUP_DELETE_SUCCESS = \"TODO_GROUP_DELETE_SUCCESS\";\nexport const TODO_GROUP_DELETE_ERROR = \"TODO_GROUP_DELETE_ERROR\";\n\nexport const TODO_DELETE_SUCCESS = \"TODO_DELETE_SUCCESS\";\nexport const TODO_DELETE_ERROR = \"TODO_DELETE_ERROR\";\n\nexport const ADD_MESSAGE = \"ADD_MESSAGE\";\nexport const REMOVE_MESSAGE = \"REMOVE_MESSAGE\";\n\n\n","import {v4 as uuid} from \"uuid\";\nimport {Dispatch} from \"redux\";\nimport {ADD_MESSAGE, REMOVE_MESSAGE} from \"./types\";\nimport {VariantType} from \"notistack\";\n\nexport interface messageObj {\n    message: string,\n    alertType: VariantType,\n    id: string\n}\n\nexport interface addMsgAction {\n    type: string;\n    payload: messageObj,\n}\n\nexport interface closeMsgAction {\n    type: string,\n    payload: string,\n}\n\nexport const AddMessage = (message: string, alertType: VariantType, dispatch: Dispatch<addMsgAction | closeMsgAction>, timeout = 3000) => {\n    const id = uuid(); //generate a uuid for the new alert action.\n    dispatch({\n        //dispatch this new action to the reducer.\n        type: ADD_MESSAGE,\n        payload: {message, alertType, id},\n    });\n\n    //make the alert disappear by setting a timeout\n    setTimeout(() => dispatch({type: REMOVE_MESSAGE, payload: id}), timeout);\n}\n\nexport const CloseMessage = (messageId: string, dispatch: Dispatch<closeMsgAction>) => {\n    dispatch({\n        type: REMOVE_MESSAGE,\n        payload: messageId\n    })\n}\n\n","import {Dispatch} from \"redux\";\nimport {myAction} from \"../../utils/actionType\";\nimport {\n    AUTH_ERROR, TODO_ADD_ERROR, TODO_ADD_SUCCESS, TODO_DELETE_ERROR, TODO_DELETE_SUCCESS,\n    TODO_INFO_LOADED,\n    TODO_UPDATE_ERROR,\n    TODO_UPDATE_SUCCESS,\n    UPDATE_DETAILS,\n} from \"./types\";\nimport axios from \"axios\";\nimport {sendDateAxisConfig, setHttpReqHeaderWithToken} from \"../../utils/setHttpReqHeader\";\nimport {AddMessage} from \"./MessageAction\";\n\nexport interface TodoItem {\n    _id: string,\n    title: string,\n    subTitle: string,\n    isFinished: boolean,\n    repeatCircle: string,\n    creator: string,\n    group: string,\n    createAt: string,\n    scheduleAt: string,\n    description: string,\n}\n\nexport const loadTodos = async (dispatch: Dispatch<myAction>) => {\n    if (localStorage.token) {\n        setHttpReqHeaderWithToken(localStorage.token);\n    }\n    try {\n        const response = await axios.get(\"/api/group\")\n        let todoGroups = [];\n        for (let todoGroup of response.data.todoGroups) {\n            todoGroup = {...todoGroup, todoItemDetails: todoGroup.todoList[0]}\n            todoGroups.push(todoGroup);\n        }\n        dispatch({\n            type: TODO_INFO_LOADED,\n            payload: {\n                todoGroups: todoGroups,\n            }\n        })\n    } catch (error) {\n        AddMessage(error.response.data.message, \"error\", dispatch);\n        dispatch({\n            type: AUTH_ERROR,\n            payload: null\n        })\n    }\n}\n\nexport const updateATodoItem = async (todoItem: TodoItem, dispatch: Dispatch<myAction>) => {\n    try {\n        const reqBodyContent = JSON.stringify(todoItem)\n        const response = await axios.put(\"/api/todo/\", reqBodyContent, sendDateAxisConfig())\n        dispatch({\n            type: TODO_UPDATE_SUCCESS,\n            payload: response.data\n        })\n        AddMessage(\"Update a new item successfully\", \"success\", dispatch);\n    } catch (error) {\n        AddMessage(error.response.data.message, \"error\", dispatch);\n        dispatch({\n            type: TODO_UPDATE_ERROR,\n            payload: null\n        })\n    }\n}\n\nexport const addATodoItem = async (newTodoItem: any, dispatch: Dispatch<myAction>) => {\n    try {\n        const reqBodyContent = JSON.stringify(newTodoItem)\n        const response = await axios.post('/api/todo/', reqBodyContent, sendDateAxisConfig())\n        dispatch({\n            type: TODO_ADD_SUCCESS,\n            payload: response.data\n        })\n        await loadTodos(dispatch)\n        AddMessage(\"Add a new item successfully\", \"success\", dispatch);\n    } catch (error) {\n        AddMessage(error.response.data.message, \"error\", dispatch);\n        dispatch({\n            type: TODO_ADD_ERROR,\n            payload: null,\n        })\n    }\n}\n\nexport const deleteATodoItem = async (todoItemId: string, dispatch: Dispatch<myAction>) => {\n    try {\n        const response = await axios.delete(`/api/todo/${todoItemId}`)\n        dispatch({\n            type: TODO_DELETE_SUCCESS,\n            payload: response.data\n        })\n        await loadTodos(dispatch)\n        AddMessage(\"Delete a new item successfully\", \"success\", dispatch);\n    } catch (error) {\n        AddMessage(error.response.data.message, \"error\", dispatch);\n        dispatch({\n            type: TODO_DELETE_ERROR,\n            payload: null,\n        })\n    }\n}\n\nexport const showDetails = (todoItem: TodoItem, dispatch: Dispatch<myAction>) => {\n    try {\n        dispatch({\n            type: UPDATE_DETAILS,\n            payload: todoItem\n        })\n    } catch (error) {\n        AddMessage(error, \"error\", dispatch);\n    }\n}","import axios from \"axios\";\nimport {Dispatch} from \"redux\";\nimport {setHttpReqHeaderWithToken, sendDateAxisConfig} from \"../../utils/setHttpReqHeader\";\nimport {\n    AUTH_ERROR,\n    USER_PROFILE_LOADED,\n    LOGIN_ERROR,\n    LOGIN_SUCCESS,\n    REGISTER_FAIL,\n    REGISTER_SUCCESS,\n    LOG_OUT, CLEAR_TODO\n} from './types';\nimport {myAction} from \"../../utils/actionType\";\nimport {loadTodos} from \"./todoItemAction\";\nimport {AddMessage} from \"./MessageAction\";\n\n\n//loading user based on the token from localStorage\nexport const loadUser = async (dispatch: Dispatch<myAction>) => {\n    if (localStorage.token) {\n        setHttpReqHeaderWithToken(localStorage.token);\n    }\n\n    try {\n        const response = await axios.get(\"/api/user\")\n        dispatch({\n            type: USER_PROFILE_LOADED,\n            payload: {\n                userInfo: response.data,\n                token: localStorage.token\n            }\n        })\n        loadTodos(dispatch).then();\n    } catch (error) {\n        console.log(error)\n        dispatch({\n            type: AUTH_ERROR,\n            payload: null\n        })\n    }\n}\n\n//user register action func\nexport const register = async (email: string, username: string, password: string, dispatch: Dispatch<myAction>) => {\n    try {\n        const reqBodyContent = JSON.stringify({email, username, password});\n        const response = await axios.post('/api/user', reqBodyContent, sendDateAxisConfig());\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: response.data,\n        })\n        AddMessage(\"Sign up successfully\", \"success\", dispatch);\n    } catch (error) {\n        AddMessage(\"Please check your input!\", \"info\", dispatch);\n        AddMessage(error.response.data.message, \"error\", dispatch);\n        dispatch({\n            type: REGISTER_FAIL,\n            payload: error,\n        })\n    }\n}\n\n//user login action func\nexport const login = async (email: string, password: string, dispatch: Dispatch<myAction>) => {\n    try {\n        const reqBodyContent = JSON.stringify({email, password});\n        const responseForToken = await axios.post(\"/api/auth/\", reqBodyContent, sendDateAxisConfig())\n        //await loadUser(dispatch);\n        setHttpReqHeaderWithToken(responseForToken.data.token);\n        const responseForProfile = await axios.get(\"/api/user\")\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: {\n                'token': responseForToken.data.token,\n                'userInfo': responseForProfile.data\n            },\n        })\n        await loadTodos(dispatch);\n        AddMessage(\"Welcome Back!\", \"success\", dispatch);\n    } catch (error) {\n        AddMessage(\"Please check your input!\", \"info\", dispatch);\n        AddMessage(error, \"error\", dispatch);\n        dispatch({\n            type: LOGIN_ERROR,\n            payload: {\n                status: error.response.status,\n                msg: error.response.statusText\n            }\n        })\n    }\n}\n\nexport const logout = (dispatch: Dispatch<myAction>) => {\n    dispatch({\n        type: CLEAR_TODO,\n        payload: null,\n    })\n    dispatch({\n        type: LOG_OUT,\n        payload: null,\n    })\n}","import {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppState} from \"../../redux/store/AppState\";\nimport {Link, NavLink as RouterLink} from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport React, {Fragment, useState} from \"react\";\nimport {Badge, Button, Hidden, IconButton} from \"@material-ui/core\";\nimport NotificationsIcon from '@material-ui/icons/NotificationsOutlined';\nimport InputIcon from '@material-ui/icons/Input';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {logout} from \"../../redux/actions/authAction\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        title: {\n            flexGrow: 1,\n            display: \"flex\",\n            // [theme.breakpoints.down(\"md\")]: {\n            //     display: \"flex\",\n            //     color: 'red'\n            // }\n        },\n        appBar: {\n            backgroundColor: 'black',\n            boxShadow: \"none\",\n            position: 'absolute',\n            width: '100%',\n            paddingTop: \"0px\",\n            display: \"block\",\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        toolBar:{\n            paddingLeft: \"5px\",\n        },\n        button: {\n            color: \"inherit\",\n            textTransform: 'none',\n        }\n    }),\n);\n\nconst NavBar = (props: any) => {\n    const {loading, isAuthed} = useSelector((state: AppState) => state.auth);\n    const [notifications] = useState([]);\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const privateLinks = (\n        <Fragment>\n            <IconButton color=\"inherit\">\n                <Badge\n                    badgeContent={notifications.length}\n                    color=\"primary\"\n                    variant=\"dot\"\n                >\n                    <NotificationsIcon/>\n                </Badge>\n            </IconButton>\n            <IconButton color=\"inherit\" onClick={() => {\n                logout(dispatch)\n            }}>\n                <InputIcon/>\n            </IconButton>\n        </Fragment>\n    );\n\n    const publicLinks = (\n        <Fragment>\n            <Button component={RouterLink} className={classes.button} to=\"/register\"><Typography\n                variant=\"h5\">Sign Up</Typography></Button>\n            <Button component={RouterLink} className={classes.button} to=\"/login\"><Typography\n                variant=\"h5\">Sign In</Typography></Button>\n        </Fragment>\n    )\n\n    return (\n        <AppBar className={classes.appBar}>\n            <Toolbar className={classes.toolBar}>\n                {/*<Icon >*/}\n                {/*    <TrackChangesIcon/>*/}\n                {/*</Icon>*/}\n                <IconButton component={Link} to=\"/\" color=\"inherit\">\n                    <TrackChangesIcon/>\n                </IconButton>\n\n\n                <Typography variant=\"h3\" className={classes.title}>\n                    &nbsp;&nbsp; My Todos\n                </Typography>\n\n\n                <div style={{flexGrow: 1}}/>\n                <Hidden smDown>\n                    {isAuthed ? privateLinks : publicLinks}\n                </Hidden>\n                <Hidden mdUp>\n                    <IconButton\n                        color=\"inherit\"\n                        onClick={props.onMobileNavOpen}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                </Hidden>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nNavBar.propTypes = {\n    onMobileNavOpen: PropTypes.func\n};\n\nexport default NavBar;","import {colors, createMuiTheme} from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#339df1\",\n            contrastText: \"#fff\",\n        },\n        background: {\n            default: '#F4F6F8',\n            paper: colors.common.white\n        },\n        text: {\n            primary: '#172b4d',\n            secondary: '#6b778c',\n        }\n    },\n    typography: {\n        h1: {\n            fontWeight: 500,\n            fontSize: 35,\n            letterSpacing: '-0.24px'\n        },\n        h2: {\n            fontWeight: 500,\n            fontSize: 29,\n            letterSpacing: '-0.24px'\n        },\n        h3: {\n            fontWeight: 500,\n            fontSize: 24,\n            letterSpacing: '-0.06px'\n        },\n        h4: {\n            fontWeight: 500,\n            fontSize: 20,\n            letterSpacing: '-0.06px'\n        },\n        h5: {\n            fontWeight: 500,\n            fontSize: 16,\n            letterSpacing: '-0.05px'\n        },\n        h6: {\n            fontWeight: 500,\n            fontSize: 14,\n            letterSpacing: '-0.05px'\n        },\n        overline: {\n            fontWeight: 500\n        }\n    }\n})","import {\n    Divider,\n    Drawer,\n    List,\n    Avatar,\n    Box,\n    Hidden,\n    Typography, ListItemIcon, ListItemText, ListItem\n} from \"@material-ui/core\";\nimport React, {Fragment} from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {Link, useLocation} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n    AlertCircle as AlertCircleIcon,\n    Settings as SettingsIcon,\n    User as UserIcon,\n    Calendar as CalendarIcon,\n    Command as CommandIcon,\n    Database as DataBaseIcon,\n    LogOut as LogOutIcon,\n    Layers as LayersIcon\n} from 'react-feather';\nimport {useEffect} from \"react\";\nimport MailIcon from '@material-ui/icons/Mail';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport {theme} from \"../../theme/myTheme\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppState} from \"../../redux/store/AppState\";\nimport {AuthInfo} from \"../../redux/reducers/AuthReducer\";\nimport {logout} from \"../../redux/actions/authAction\";\n\nconst functionItems = [\n    {\n        href: '/app/homepage/group/add',\n        icon: LayersIcon,\n        title: 'Add Group +'\n    }\n]\n\nconst systemItems = [\n    {\n        href: '/app/homepage/user/account',\n        icon: UserIcon,\n        title: 'Account'\n    },\n    {\n        href: '/app/homepage/user/settings',\n        icon: SettingsIcon,\n        title: 'Settings'\n    },\n    {\n        href: '/logout',\n        icon: LogOutIcon,\n        title: 'Log out'\n    },\n    {\n        href: '/app/homepage/help',\n        icon: AlertCircleIcon,\n        title: 'Help'\n    }\n]\n\n\nconst drawerWidth = 256;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n            anchor: \"left\",\n            variant: \"temporary\",\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n        },\n        drawBox: {\n            display: 'flex',\n            flexDirection: 'column',\n            height: '100%'\n        },\n        profileBox: {\n            alignItems: 'center',\n            display: 'flex',\n            flexDirection: 'column',\n            p: 2\n        },\n        Avatar: {\n            cursor: 'pointer',\n            width: 81,\n            height: 81\n        },\n        toolbar: theme.mixins.toolbar,\n        sideBarButtons: {},\n        menuBox: {\n            p: 2\n        },\n        paperProps: {\n            width: 256,\n            top: 64,\n            height: 'calc(100% - 64px)'\n        }\n    }),\n);\n\n\nconst SideBar = (props: any) => {\n    const authInfo: AuthInfo = useSelector((state: AppState) => state.auth);\n    const {todoGroups} = useSelector((state: AppState) => state.todo);\n    const {isAuthed, userInfo} = authInfo;\n    const classes = useStyles();\n    const location = useLocation();\n    const dispatch = useDispatch();\n    useEffect(() => {\n        if (openMobile && onMobileClose) {\n            onMobileClose();\n        }\n    }, [location.pathname]);\n\n    const user = {\n        avatar: 'https:' + userInfo.profile.avatar,\n        jobTitle: 'Full-Stack Developer',\n        name: userInfo.profile.username,\n        //todoGroup: userInfo.profile.todoGroup\n    };\n\n    const todoGroupItems: Array<any> = [];\n\n    if (todoGroups !== null) {\n        for (const todoGroup of todoGroups) {\n            let groupBtn = {\n                href: '/app/homepage/group/' + todoGroup._id,\n                icon: todoGroup.groupName === 'Today' ? CalendarIcon : (todoGroup.groupName === 'Important' ? CommandIcon : DataBaseIcon),\n                title: todoGroup.groupName\n            }\n            todoGroupItems.push(groupBtn);\n        }\n    }\n\n    const {onMobileClose, openMobile} = props;\n\n    const authContent = (\n        <Fragment>\n            <Box className={classes.profileBox}>\n                <Avatar className={classes.Avatar} src={user.avatar}/>\n                <Typography variant=\"h5\" color=\"textPrimary\">{user.name}</Typography>\n                <Typography color=\"textSecondary\" variant=\"body2\">{user.jobTitle}</Typography>\n            </Box>\n            <Divider/>\n            <List className={classes.sideBarButtons}>\n                {todoGroupItems.map((item) => (\n                    <ListItem button key={item.title} component={Link} to={item.href}>\n                        <ListItemIcon>{item.icon !== null ? <item.icon size=\"20\"/> : <MailIcon/>}</ListItemIcon>\n                        <ListItemText primary={item.title}/>\n                    </ListItem>\n                ))}\n            </List>\n            <Divider/>\n            <List className={classes.sideBarButtons}>\n                {functionItems.map((item) => (\n                    <ListItem button key={item.title} component={Link} to={item.href}>\n                        <ListItemIcon>{item.icon !== null ? <item.icon size=\"20\"/> : <MailIcon/>}</ListItemIcon>\n                        <ListItemText primary={item.title}/>\n                    </ListItem>\n                ))}\n            </List>\n            <Divider/>\n            <List>\n                {systemItems.map((item) => {\n                    if (item.title === 'Log out') {\n                        return (\n                            <ListItem button key={item.title} onClick={() => logout(dispatch)}>\n                                <ListItemIcon>{item.icon !== null ? <item.icon size=\"20\"/> : <MailIcon/>}</ListItemIcon>\n                                <ListItemText primary={item.title}/>\n                            </ListItem>\n                        )\n\n                    } else {\n                        return (\n                            <ListItem button key={item.title} component={Link} to={item.href}>\n                                <ListItemIcon>{item.icon !== null ? <item.icon size=\"20\"/> : <MailIcon/>}</ListItemIcon>\n                                <ListItemText primary={item.title}/>\n                            </ListItem>\n                        );\n                    }\n\n                })}\n            </List>\n        </Fragment>\n    )\n\n    const unAuthContent = (\n        <Fragment>\n            <List>\n                {['Sign In', 'Sign Up', 'help'].map((text, index) => (\n                    <ListItem button key={text}>\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon/> : <MailIcon/>}</ListItemIcon>\n                        <ListItemText primary={text}/>\n                    </ListItem>\n                ))}\n            </List>\n        </Fragment>\n    )\n\n    const content = (\n        <div>\n            <div className={classes.toolbar}/>\n            <div style={{marginTop: '5px'}}>\n                {isAuthed ? (\n                    authContent\n                ) : (\n                    unAuthContent\n                )}\n            </div>\n        </div>\n    );\n\n\n    return (\n        <div>\n            <Hidden mdUp implementation=\"css\">\n                <Drawer variant=\"temporary\"\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                        onClose={onMobileClose}\n                        open={openMobile}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                >\n                    {content}\n                </Drawer>\n            </Hidden>\n            <Hidden smDown implementation=\"css\">\n                <Drawer\n                    classes={{\n                        paper: classes.drawerPaper\n                    }}\n                    variant=\"permanent\"\n                    anchor='left'\n                    open\n                >\n                    {content}\n                </Drawer>\n            </Hidden>\n        </div>\n    );\n}\n\nSideBar.protoType = {\n    onMobileClose: PropTypes.func,\n    openMobile: PropTypes.bool\n}\n\nSideBar.defaultProps = {\n    onMobileClose: () => {\n    },\n    openMobile: false\n};\n\nexport default SideBar;","import {useState} from \"react\";\nimport {Navigate, Outlet} from 'react-router-dom';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport NavBar from \"./NavBar\";\nimport SideBar from \"./SideBar\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppState} from \"../../redux/store/AppState\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        DashboardLayoutRoot: {\n            backgroundColor: theme.palette.background.default,\n            display: 'flex',\n            height: '100vh',\n            overflow: 'hidden',\n            width: '100%',\n            minWidth: '339px',\n            //padding: '0px'\n        },\n        DashboardLayoutWrapper: {\n            display: 'flex',\n            flex: '1 1 auto',\n            overflow: 'hidden',\n            height: '100%',\n            paddingTop: 64,\n            [theme.breakpoints.up('md')]: {\n                paddingLeft: 256\n            },\n        },\n        DashboardLayoutContainer: {\n            display: 'flex',\n            flex: '1 1 auto',\n            overflow: 'hidden'\n        },\n        DashboardLayoutContent: {\n            flex: '1 1 auto',\n            height: '100vh',\n            overflow: 'auto'\n        },\n    }),\n);\n\n\nconst DashboardLayout = () => {\n    const {isAuthed} = useSelector((state: AppState) => state.auth);\n    const [isMobileNavOpen, setMobileNavOpen] = useState(false);\n    const classes = useStyles();\n    // const dispatch = useDispatch();\n    // useEffect(() => {\n    //     loadTodos(dispatch).then();\n    // }, [])\n    if (!isAuthed) {\n        return <Navigate to=\"/login\"/>;\n    }\n\n    return (\n        <div className={classes.DashboardLayoutRoot}>\n            <NavBar onMobileNavOpen={() => setMobileNavOpen(true)}/>\n            <SideBar\n                onMobileClose={() => setMobileNavOpen(false)}\n                openMobile={isMobileNavOpen}\n            />\n            <div className={classes.DashboardLayoutWrapper}>\n                <div className={classes.DashboardLayoutContainer}>\n                    <div className={classes.DashboardLayoutContent}>\n                        <Outlet/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\nexport default DashboardLayout;","import {useState} from \"react\";\nimport NavBar from \"./NavBar\";\nimport {Outlet} from \"react-router-dom\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        LandingLayoutRoot: {\n            backgroundColor: theme.palette.background.default,\n            display: 'flex',\n            height: '100%',\n            overflow: 'hidden',\n            width: '100%',\n            minWidth: '339px', padding: '0px'\n        },\n        LandingLayoutWrapper: {\n            display: 'flex',\n            flex: '1 1 auto',\n            overflow: 'hidden',\n            //paddingTop: 64,\n        },\n        LandingLayoutContainer: {\n            display: 'flex',\n            flex: '1 1 auto',\n            overflow: 'hidden'\n        },\n        LandingLayoutContent: {\n            flex: '1 1 auto',\n            height: '100%',\n            overflow: 'auto'\n        },\n    }),\n);\n\nconst LandingPageLayout = () => {\n    const [isMobileNavOpen, setMobileNavOpen] = useState(false);\n    const classes = useStyles();\n    return (\n        <div className={classes.LandingLayoutRoot}>\n            <NavBar onMobileNavOpen={() => setMobileNavOpen(true)}/>\n            <div className={classes.LandingLayoutWrapper}>\n                <div className={classes.LandingLayoutContainer}>\n                    <div className={classes.LandingLayoutContent}>\n                        <Outlet/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default LandingPageLayout;","export default __webpack_public_path__ + \"static/media/landingBackground.de13573b.jpeg\";","import {useSelector} from \"react-redux\";\nimport {AppState} from \"../../redux/store/AppState\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {Button} from \"@material-ui/core\";\nimport {NavLink as RouterLink} from 'react-router-dom';\nimport image from \"../../assets/imgs/landingBackground.jpeg\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        landingSection: {\n            position: 'relative',\n            backgroundImage: \"url(\" + image + \")\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"top center\",\n            height: '100vh',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n        },\n        mainContent: {\n            //backgroundColor: 'white',\n            width: '80%',\n            height: '100%',\n        },\n        inner: {\n            color: '#fff',\n            height: '100%',\n            width: '100%',\n            margin: 'auto',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            textAlign: 'center',\n        },\n        title: {\n            fontSize: '4rem',\n            color: 'white',\n            lineHeight: 1.2,\n            marginBottom: '1rem',\n        },\n        subTitle: {\n            fontSize: '1.5rem',\n            marginBottom: '1rem',\n            color: 'white',\n        },\n        buttons: {\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n\n        }\n    }),\n);\n\n\nconst WelcomePage = () => {\n    const classes = useStyles();\n    return (\n        <section className={classes.landingSection}>\n            <div className={classes.mainContent}>\n                <div className={classes.inner}>\n                    <h1 className={classes.title}>Welcome to Todos</h1>\n                    <p className={classes.subTitle}>\n                        Let's start managing our daily routine with this fully new way!\n                    </p>\n                    <div className={classes.buttons}>\n                        <Button variant=\"contained\" color=\"primary\" component={RouterLink} to=\"/register\">\n                            Sign Up\n                        </Button>\n                        <Button variant=\"contained\" color=\"primary\" component={RouterLink} to=\"/login\">\n                            Sign In\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n}\n\nexport default WelcomePage;","import {Navigate, Link} from 'react-router-dom';\nimport {Helmet} from 'react-helmet';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {\n    Button,\n    Card,\n    CardContent,\n    InputAdornment,\n    TextField,\n    Typography,\n    Grid,\n    CardHeader, Divider\n} from \"@material-ui/core\";\nimport image from \"../../assets/imgs/landingBackground.jpeg\";\nimport React, {useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport LockRoundedIcon from '@material-ui/icons/LockRounded';\n//import { Redirect } from \"react-router-dom\";\n\nimport {login} from '../../redux/actions/authAction';\nimport {AppState} from \"../../redux/store/AppState\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        loginSection: {\n            position: 'relative',\n            backgroundImage: \"url(\" + image + \")\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"top center\",\n            height: '100vh',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n        },\n        mainContent: {\n            //backgroundColor: 'white',\n            width: '80%',\n            height: '50%',\n            margin: 'auto',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            textAlign: 'center',\n        },\n        innerBox: {\n            height: '100%',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            textAlign: 'center',\n        },\n        inputCard: {\n            height: '80%',\n            opacity: 0.96,\n        },\n        cardContent: {\n            width: '80%',\n            margin: 'auto',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n        },\n        margin: {\n            margin: theme.spacing(1),\n            marginTop: '20px',\n        },\n        forgetAndRegister: {\n            margin: theme.spacing(1),\n            marginTop: '10px',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n        }\n    }),\n);\n\nconst LoginPage = () => {\n    const {isAuthed} = useSelector((state: AppState) => state.auth);\n    const todos = useSelector((state: AppState) => state.todo);\n    const classes = useStyles();\n    const [userEmail, setUserEmail] = useState('');\n    const [userPassword, setUserPassword] = useState('');\n    const dispatch = useDispatch();\n\n    const submitInput = async (event: React.SyntheticEvent) => {\n        event.preventDefault();\n        await login(userEmail, userPassword, dispatch);\n    }\n    if (isAuthed && todos.todoGroups.length !== 0) {\n        return <Navigate to={`/app/homepage/group/${ todos.todoGroups[0]._id}`}/>;\n    }\n\n    return (\n        <div>\n            <Helmet>\n                <title>Login</title>\n            </Helmet>\n\n            <section className={classes.loginSection}>\n                <div className={classes.mainContent}>\n                    <div className={classes.innerBox}>\n                        <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                            <Card className={classes.inputCard}>\n                                <form onSubmit={submitInput}>\n                                    <CardHeader title={\n                                        <Typography align=\"center\" variant=\"h3\">\n                                            Welcome back!\n                                        </Typography>\n                                    }/>\n                                    <Divider/>\n                                    <CardContent className={classes.cardContent}>\n                                        <TextField\n                                            className={classes.margin}\n                                            // id=\"input-with-icon-textfield\"\n                                            label=\"Email\"\n                                            required\n                                            InputProps={{\n                                                startAdornment: (\n                                                    <InputAdornment position=\"start\">\n                                                        <AlternateEmailIcon/>\n                                                    </InputAdornment>\n                                                ),\n                                            }}\n                                            onChange={(event) => {\n                                                setUserEmail(event.target.value)\n                                            }}\n                                            placeholder=\"Please input your username\"\n                                            value={userEmail}\n                                        />\n                                        <TextField\n                                            className={classes.margin}\n                                            label=\"Password\"\n                                            type='password'\n                                            required\n                                            InputProps={{\n                                                startAdornment: (\n                                                    <InputAdornment position=\"start\">\n                                                        <LockRoundedIcon/>\n                                                    </InputAdornment>\n                                                ),\n                                            }}\n                                            onChange={(event) => {\n                                                setUserPassword(event.target.value)\n                                            }}\n                                            placeholder=\"Please input your password\"\n                                            value={userPassword}\n                                        />\n                                        <div className={classes.margin}>\n                                            <Button variant=\"contained\" color=\"primary\" style={{width: '100%'}}\n                                                    type=\"submit\"\n                                                    value=\"Submit\">\n                                                Login In Now\n                                            </Button>\n                                        </div>\n                                        <div className={classes.forgetAndRegister}>\n                                            <Typography align=\"center\" variant=\"h5\">\n                                                Don't have an account?&nbsp;\n                                                <Link to=\"/register\" color='primary'>\n                                                    Sign up\n                                                </Link>\n                                            </Typography>\n                                        </div>\n                                    </CardContent>\n                                </form>\n                            </Card>\n                        </Grid>\n                    </div>\n                </div>\n            </section>\n\n\n        </div>\n    );\n}\n\nexport default LoginPage;","import {Navigate, Link} from 'react-router-dom';\nimport {Helmet} from 'react-helmet';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {\n    Button,\n    Card,\n    CardContent,\n    InputAdornment,\n    TextField,\n    Typography,\n    Grid,\n    CardHeader, Divider\n} from \"@material-ui/core\";\nimport image from \"../../assets/imgs/landingBackground.jpeg\";\nimport React, {useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AccountCircle} from \"@material-ui/icons\";\nimport LockRoundedIcon from '@material-ui/icons/LockRounded';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\n\nimport {register} from '../../redux/actions/authAction';\nimport {AppState} from \"../../redux/store/AppState\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        registerSection: {\n            position: 'relative',\n            backgroundImage: \"url(\" + image + \")\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"top center\",\n            height: '100vh',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n        },\n        mainContent: {\n            //backgroundColor: 'white',\n            width: '80%',\n            height: '50%',\n            margin: 'auto',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            textAlign: 'center',\n        },\n        innerBox: {\n            height: '100%',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            textAlign: 'center',\n        },\n        inputCard: {\n            height: '90%',\n            //backgroundColor: 'transparent',\n            opacity: 0.96,\n        },\n        cardContent: {\n            width: '80%',\n            margin: 'auto',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n        },\n        margin: {\n            margin: theme.spacing(1),\n            marginTop: '20px',\n        },\n        forgetAndRegister: {\n            margin: theme.spacing(1),\n            marginTop: '10px',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n        }\n    }),\n);\n\nconst RegisterPage = () => {\n    const {isAuthed} = useSelector((state: AppState) => state.auth);\n    const classes = useStyles();\n    const [userEmail, setUserEmail] = useState('');\n    const [userName, setUserName] = useState('');\n    const [userPassword, setUserPassword] = useState('');\n    const [registerStatus, setRegisterStatus] = useState(false);\n    const dispatch = useDispatch();\n\n    const submitInput = async (event: React.SyntheticEvent) => {\n        event.preventDefault();\n        register(userEmail, userName, userPassword, dispatch).then(() => {\n            setRegisterStatus(true);\n        });\n    }\n    if (isAuthed) {\n        return <Navigate to=\"/app/homepage\"/>;\n    }\n\n    if(registerStatus){\n        return <Navigate to=\"/login\"/>;\n    }\n\n    return (\n        <div>\n            <Helmet>\n                <title>Sign Up</title>\n            </Helmet>\n\n            <section className={classes.registerSection}>\n                <div className={classes.mainContent}>\n                    <div className={classes.innerBox}>\n                        <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                            <Card className={classes.inputCard}>\n                                <form onSubmit={submitInput}>\n                                    <CardHeader title={\n                                        <Typography align=\"center\" variant=\"h3\">\n                                            Create an Account\n                                        </Typography>\n                                    }/>\n                                    <Divider/>\n                                    <CardContent className={classes.cardContent}>\n                                        <TextField\n                                            className={classes.margin}\n                                            label=\"Email\"\n                                            required\n                                            InputProps={{\n                                                startAdornment: (\n                                                    <InputAdornment position=\"start\">\n                                                        <AlternateEmailIcon/>\n                                                    </InputAdornment>\n                                                ),\n                                            }}\n                                            onChange={(event) => {\n                                                setUserEmail(event.target.value)\n                                            }}\n                                            placeholder=\"Please input your email address\"\n                                            value={userEmail}\n                                        />\n                                        <TextField\n                                            className={classes.margin}\n                                            label=\"Username\"\n                                            required\n                                            InputProps={{\n                                                startAdornment: (\n                                                    <InputAdornment position=\"start\">\n                                                        <AccountCircle/>\n                                                    </InputAdornment>\n                                                ),\n                                            }}\n                                            onChange={(event) => {\n                                                setUserName(event.target.value)\n                                            }}\n                                            placeholder=\"Please input your username\"\n                                            value={userName}\n                                        />\n                                        <TextField\n                                            className={classes.margin}\n                                            label=\"Password\"\n                                            type='password'\n                                            required\n                                            InputProps={{\n                                                startAdornment: (\n                                                    <InputAdornment position=\"start\">\n                                                        <LockRoundedIcon/>\n                                                    </InputAdornment>\n                                                ),\n                                            }}\n                                            onChange={(event) => {\n                                                setUserPassword(event.target.value)\n                                            }}\n                                            placeholder=\"Please input your password\"\n                                            value={userPassword}\n                                        />\n                                        <div className={classes.margin}>\n                                            <Button variant=\"contained\" color=\"primary\" style={{width: '100%'}}\n                                                    type=\"submit\"\n                                                    value=\"Submit\">\n                                                Register Now\n                                            </Button>\n                                        </div>\n                                        <div className={classes.forgetAndRegister}>\n                                            <Typography align=\"center\" variant=\"h5\">\n                                                Already have an account?&nbsp;\n                                                <Link to=\"/login\" color='textPrimary'>\n                                                    Sign In\n                                                </Link>\n                                            </Typography>\n                                        </div>\n                                    </CardContent>\n                                </form>\n                            </Card>\n                        </Grid>\n                    </div>\n                </div>\n            </section>\n        </div>\n    );\n}\n\nexport default RegisterPage;","import {TodoGroup} from \"../reducers/TodoReducer\";\nimport {myAction} from \"../../utils/actionType\";\nimport {Dispatch} from \"redux\";\nimport axios from \"axios\";\nimport {\n    DELETE_A_GROUP,\n    TODO_ADD_SUCCESS,\n    TODO_GROUP_ADD_ERROR,\n    TODO_GROUP_ADD_SUCCESS,\n    TODO_GROUP_DELETE_ERROR, TODO_GROUP_DELETE_SUCCESS\n} from \"./types\";\nimport {sendDateAxisConfig} from \"../../utils/setHttpReqHeader\";\nimport {loadTodos} from \"./todoItemAction\";\nimport {AddMessage} from \"./MessageAction\";\n\nexport const addAGroup = async (groupName: string, dispatch: Dispatch<myAction>) => {\n    try {\n        const reqBodyContent = JSON.stringify({groupName})\n        const response = await axios.post('/api/group', reqBodyContent, sendDateAxisConfig())\n        dispatch({\n            type: TODO_GROUP_ADD_SUCCESS,\n            payload: response.data\n        })\n        await loadTodos(dispatch)\n        AddMessage(\"Add a new group successfully\", \"success\", dispatch);\n    } catch (error) {\n        AddMessage(error.response.data.message, \"error\", dispatch);\n        dispatch({\n            type: TODO_GROUP_ADD_ERROR,\n            payload: null\n        })\n    }\n}\n\nexport const updateAGroup = async (updatedGroup: TodoGroup, dispatch: Dispatch<myAction>) => {\n    try {\n        const reqBodyContent = JSON.stringify(updatedGroup)\n        const response = await axios.put('/api/group', reqBodyContent, sendDateAxisConfig())\n        dispatch({\n            type: TODO_GROUP_ADD_SUCCESS,\n            payload: response.data\n        })\n        await loadTodos(dispatch)\n        AddMessage(\"Add a new group successfully\", \"success\", dispatch);\n    } catch (error) {\n        AddMessage(error.response.data.message, \"error\", dispatch);\n        dispatch({\n            type: TODO_GROUP_ADD_ERROR,\n            payload: null\n        })\n    }\n}\n\nexport const deleteAGroup = async (todoGroup: TodoGroup, dispatch: Dispatch<myAction>) => {\n    try {\n        await axios.delete('/api/group/' + todoGroup._id)\n        dispatch({\n            type: TODO_GROUP_DELETE_SUCCESS,\n            payload: todoGroup\n        })\n        await loadTodos(dispatch)\n        AddMessage(\"Delete a new group successfully\", \"success\", dispatch);\n    } catch (error) {\n        AddMessage(error.response.data.message, \"error\", dispatch);\n        dispatch({\n            type: TODO_GROUP_DELETE_ERROR,\n            payload: null\n        })\n    }\n}\n","import React, {Fragment} from \"react\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport {\n    Card,\n    CardHeader,\n    Divider,\n    Typography\n} from \"@material-ui/core\";\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {AppState} from \"../../../redux/store/AppState\";\nimport {TodoGroup} from \"../../../redux/reducers/TodoReducer\";\nimport {deleteAGroup} from \"../../../redux/actions/todoGroupsAction\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        card: {\n            height: '95%',\n            backgroundColor: 'white'\n        }, list: {\n            paddingBottom: '0px',\n            paddingTop: '0px',\n            overflow: 'auto',\n            maxHeight: '100%',\n        }\n    }),\n);\n\n\nconst TodoGroupList = ({toggleTodoGroupDetailDrawer}: any) => {\n    const classes = useStyles();\n    const {todoGroups} = useSelector((state: AppState) => state.todo);\n\n    const dispatch = useDispatch();\n\n    return (\n        <Fragment>\n            <Card className={classes.card}>\n                <CardHeader\n                    title={\n                        <Typography align=\"center\" variant=\"h3\">\n                            TodoGroups\n                        </Typography>\n                    }\n                    // action={\n                    //     <div>\n                    //         <IconButton color=\"secondary\" onClick={() => {\n                    //         }} aria-label=\"clear\">\n                    //             <DeleteSweepIcon/>\n                    //         </IconButton>\n                    //     </div>\n                    //\n                    // }\n                />\n                <Divider/>\n                {todoGroups.length !== 0 && (\n                    <List className={classes.list}>\n                        {todoGroups.map((todoGroup: TodoGroup, index: number) => {\n                            return (\n                                <ListItem divider={index < todoGroups.length} key={todoGroups._id} button\n                                          onClick={() => {\n                                              toggleTodoGroupDetailDrawer(true, todoGroup)\n                                          }}>\n                                    <ListItemAvatar>\n                                        <Avatar>{index + 1}</Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={todoGroup.groupName}\n                                        secondary={`Contains ${todoGroup.todoList.length} todoItems`}\n                                    />\n                                    <ListItemSecondaryAction>\n                                        <Button variant=\"contained\" color=\"secondary\" style={{textTransform: 'none'}}\n                                                onClick={() => deleteAGroup(todoGroup, dispatch)}>\n                                            Remove\n                                        </Button>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })}\n                    </List>)}\n            </Card>\n        </Fragment>\n    )\n}\nexport default TodoGroupList;","import {\n    Avatar, Button,\n    Card, CardContent,\n    CardHeader, Checkbox, Divider, Grid,\n    IconButton, InputAdornment, ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText, SvgIcon, TextField, Typography\n} from \"@material-ui/core\";\nimport React, {Fragment, useState} from \"react\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport {showDetails} from \"../../../redux/actions/todoItemAction\";\nimport {TodoGroup} from \"../../../redux/reducers/TodoReducer\";\nimport {Link} from \"react-router-dom\";\nimport {BubbleChart, ChatRounded, Fingerprint} from \"@material-ui/icons\";\nimport {updateAGroup} from \"../../../redux/actions/todoGroupsAction\";\nimport {useDispatch} from \"react-redux\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        inputBox: {\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'start',\n            textAlign: 'center',\n            padding: '6px',\n        }, card: {\n            minHeight: '100%',\n            backgroundColor: 'white'\n        }, list: {\n            paddingBottom: '0px',\n            paddingTop: '0px',\n            overflow: 'auto',\n            maxHeight: '100%',\n        }\n    }),\n);\n\n\nconst TodoGroupDetails = ({todoGroupDetail, toggleTodoGroupDetailDrawer}: any) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [updatedTodoGroup, setUpdatedTodoGroup] = useState<TodoGroup>(todoGroupDetail);\n\n    return (\n        <Fragment>\n            {updatedTodoGroup !== null && (\n                <Card className={classes.card}>\n                    <CardHeader\n                        title={\n                            <Typography align=\"center\" variant=\"h4\">\n                                TodoGroup details\n                            </Typography>\n                        }\n                        action={\n                            <div>\n                                <Button variant=\"contained\" color=\"primary\" type=\"submit\"\n                                        value=\"Submit\"\n                                        onClick={() => {\n                                            updateAGroup(updatedTodoGroup, dispatch).then();\n                                            toggleTodoGroupDetailDrawer(false);\n                                        }}\n                                        style={{\n                                            textTransform: 'none',\n                                            marginTop: \"10px\"\n                                        }}>Update</Button>\n                            </div>\n                        }\n                    />\n                    <Divider/>\n                    <CardContent>\n                        <Grid container>\n                            <div className={classes.inputBox}>\n                                <Grid container spacing={1}>\n                                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                        <TextField required label=\"Group ID\" fullWidth InputProps={{\n                                            startAdornment: (\n                                                <InputAdornment position=\"start\">\n                                                    <SvgIcon fontSize=\"small\" color=\"action\"><Fingerprint/>\n                                                    </SvgIcon>\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                                   placeholder={updatedTodoGroup._id}\n                                                   variant=\"outlined\"\n                                                   disabled\n                                                   value={updatedTodoGroup._id}\n                                        />\n                                    </Grid>\n                                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                        <TextField required label=\"GroupName\" fullWidth InputProps={{\n                                            startAdornment: (\n                                                <InputAdornment position=\"start\">\n                                                    <SvgIcon fontSize=\"small\" color=\"action\"><BubbleChart/>\n                                                    </SvgIcon>\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                                   onChange={(event) => {\n                                                       setUpdatedTodoGroup({\n                                                           ...updatedTodoGroup,\n                                                           groupName: event.target.value\n                                                       })\n                                                   }}\n                                                   placeholder={updatedTodoGroup.groupName}\n                                                   variant=\"outlined\"\n                                                   value={updatedTodoGroup.groupName}\n                                        />\n                                    </Grid>\n                                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                        {updatedTodoGroup.todoList.length !== 0 && (\n                                            <List className={classes.list}>\n                                                {updatedTodoGroup.todoList.map((todoItem, index) => {\n                                                    return (\n                                                        <ListItem divider={index < updatedTodoGroup.todoList.length}\n                                                                  key={todoItem._id}\n                                                                  button\n                                                                  component={Link}\n                                                                  to={`/app/homepage/group/${updatedTodoGroup._id}`}>\n                                                            <ListItemAvatar>\n                                                                <Avatar>{index + 1}</Avatar>\n                                                            </ListItemAvatar>\n                                                            <ListItemText\n                                                                primary={todoItem.title}\n                                                                secondary={todoItem.subTitle}\n                                                                style={todoItem.isFinished ? {textDecorationLine: 'line-through'} : {}}\n                                                            />\n                                                            <ListItemSecondaryAction>\n                                                                <Checkbox\n                                                                    edge=\"end\"\n                                                                    disabled\n                                                                    // onChange={handleToggle(todoItem._id, index)}\n                                                                    checked={todoItem.isFinished}\n                                                                />\n                                                            </ListItemSecondaryAction>\n                                                        </ListItem>\n                                                    )\n                                                })}\n                                            </List>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Grid>\n                    </CardContent>\n                </Card>\n            )}\n        </Fragment>\n    )\n}\nexport default TodoGroupDetails;","import {\n    Button,\n    Card, CardContent,\n    CardHeader, Divider, Grid,\n    InputAdornment,\n    SvgIcon, TextField, Typography\n} from \"@material-ui/core\";\nimport React, {Fragment, useState} from \"react\";\nimport {BubbleChart, Face} from \"@material-ui/icons\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppState} from \"../../../redux/store/AppState\";\nimport {AuthInfo} from \"../../../redux/reducers/AuthReducer\";\nimport {addAGroup} from \"../../../redux/actions/todoGroupsAction\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        inputBox: {\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'start',\n            textAlign: 'center',\n            padding: '6px',\n        }, card: {\n            height: '95%',\n            backgroundColor: 'white'\n        }\n    }),\n);\n\n\nconst TodoGroupAdd = () => {\n    const authInfo: AuthInfo = useSelector((state: AppState) => state.auth);\n    const userName = authInfo.userInfo.profile.username;\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const [newTodoGroupName, setNewTodoGroupName] = useState('');\n\n    return (\n        <Fragment>\n            <Card className={classes.card}>\n                <CardHeader\n                    title={\n                        <Typography align=\"center\" variant=\"h4\">\n                            New TodoGroup\n                        </Typography>\n                    }\n                />\n                <Divider/>\n                <CardContent>\n                    <Grid container>\n                        <div className={classes.inputBox}>\n                            <Grid container spacing={1}>\n                                <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                    <div>\n                                        <TextField required label=\"GroupName\" fullWidth InputProps={{\n                                            startAdornment: (\n                                                <InputAdornment position=\"start\">\n                                                    <SvgIcon fontSize=\"small\" color=\"action\"><BubbleChart/>\n                                                    </SvgIcon>\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                                   onChange={(event) => {\n                                                       setNewTodoGroupName(event.target.value);\n                                                   }}\n                                                   placeholder=\"Please input group name\"\n                                                   variant=\"outlined\"\n                                                   value={newTodoGroupName}\n                                        />\n                                    </div>\n                                </Grid>\n                                <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                    <div>\n                                        <TextField label=\"Owner\" fullWidth InputProps={{\n                                            startAdornment: (\n                                                <InputAdornment position=\"start\">\n                                                    <SvgIcon fontSize=\"small\" color=\"action\"><Face/>\n                                                    </SvgIcon>\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                                   disabled\n                                                   placeholder={userName}\n                                                   variant=\"outlined\"\n                                                   value={userName}\n                                        />\n                                    </div>\n                                </Grid>\n                                <Grid item xl={12} lg={12} sm={12} xs={12}>\n                                    <div style={{float: 'right'}}>\n                                        <Button variant=\"contained\" color=\"primary\" type=\"submit\"\n                                                value=\"Submit\"\n                                                onClick={() => {\n                                                    addAGroup(newTodoGroupName, dispatch).then();\n                                                }}\n                                                style={{\n                                                    textTransform: 'none',\n                                                    float: 'left',\n                                                }}>Add New</Button>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                </CardContent>\n            </Card>\n        </Fragment>\n    )\n}\nexport default TodoGroupAdd;","import {makeStyles, Theme, createStyles} from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport {Grid, SwipeableDrawer,} from \"@material-ui/core\";\nimport {TodoGroup} from \"../../../redux/reducers/TodoReducer\";\nimport TodoGroupList from \"./TodoGroupList\";\nimport TodoGroupDetails from \"./TodoGroupDetails\";\nimport TodoGroupAdd from \"./TodoGroupAdd\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        pageContent: {\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            textAlign: 'center',\n            position: 'relative',\n        }, mainComponent: {\n            width: '85%',\n            height: '100vh',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            textAlign: 'center',\n        }, leftPart: {\n            width: '100%',\n            height: '90%',\n            padding: theme.spacing(1),\n        }, rightPart: {\n            width: '100%',\n            height: '90%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'start',\n            padding: theme.spacing(1),\n        },\n        cards: {\n            height: '95vh',\n        },\n        list: {\n            width: 500,\n        },\n        paddingBox: {\n            height: '64px',\n            backgroundColor: 'black'\n        },\n        itemDetailBox: {\n            padding: theme.spacing(1),\n            height: '90vh',\n        }\n    }),\n);\n\nconst TodoGroupsManage = () => {\n    const [openDrawer, setOpenDrawer] = React.useState(false);\n    const [todoGroupDetail, setTodoGroupDetail] = React.useState({});\n    const classes = useStyles();\n\n\n    const toggleTodoGroupDetailDrawer = (open: boolean, _todoGroupDetail?: TodoGroup) => {\n        setOpenDrawer(open)\n        if (_todoGroupDetail !== undefined) {\n            setTodoGroupDetail(_todoGroupDetail)\n        }\n\n    };\n\n    const showGroupDetails = () => (\n        <div className={classes.list} role=\"presentation\">\n            <div className={classes.paddingBox}/>\n            <div className={classes.itemDetailBox}>\n                <TodoGroupDetails todoGroupDetail={todoGroupDetail} toggleTodoGroupDetailDrawer={toggleTodoGroupDetailDrawer}/>\n            </div>\n\n        </div>\n    );\n\n\n    return (\n        <div>\n            <div className={classes.pageContent}>\n                <div className={classes.mainComponent}>\n                    <div className={classes.leftPart}>\n                        <Grid container spacing={2}>\n                            <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                <div className={classes.cards}>\n                                    <TodoGroupList toggleTodoGroupDetailDrawer={toggleTodoGroupDetailDrawer}/>\n                                </div>\n                            </Grid>\n\n                        </Grid>\n                    </div>\n                    <div className={classes.rightPart}>\n                        <Grid container spacing={1}>\n                            <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                <div>\n                                    {/*<AddNewTodoItemModule groupName={groupName}/>*/}\n                                    <TodoGroupAdd/>\n                                </div>\n                            </Grid>\n                            <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                <div>\n                                    {/*<TodoItemDetailsModule todoGroup={todoGroup[0]}/>*/}\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </div>\n\n                </div>\n            </div>\n            <div>\n                <SwipeableDrawer\n                    anchor='right'\n                    open={openDrawer}\n                    onClose={() => toggleTodoGroupDetailDrawer(false)}\n                    onOpen={() => toggleTodoGroupDetailDrawer(true)}\n                >\n                    {showGroupDetails()}\n                </SwipeableDrawer>\n            </div>\n        </div>\n\n    )\n}\nexport default TodoGroupsManage;","const UserAccount = () => {\n    return (\n        <div>\n            <h1>User Account</h1>\n        </div>\n    );\n}\nexport default UserAccount;","const PageNotFound = () => {\n    return (\n        <div>\n            <h1> Page Not Found :( </h1>\n        </div>\n    )\n}\n\nexport default PageNotFound;","const UserSettings = () => {\n    return (\n        <div>\n            <h1>User Settings</h1>\n        </div>\n    );\n}\nexport default UserSettings;","const HelpPage = () => {\n    return (\n        <div>\n            <h1> Helping tips: </h1>\n        </div>\n    )\n}\n\nexport default HelpPage;","import React, {Fragment} from \"react\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport {\n    Card,\n    CardHeader, Checkbox,\n    Divider,\n    Typography\n} from \"@material-ui/core\";\nimport {showDetails, TodoItem, updateATodoItem} from \"../../../redux/actions/todoItemAction\";\nimport {useDispatch} from \"react-redux\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        card: {\n            height: '90vh',\n            backgroundColor: 'white'\n        }, list: {\n            paddingBottom: '0px',\n            paddingTop: '0px',\n            overflow: 'auto',\n            maxHeight: '90%',\n        }\n    }),\n);\n\n\nconst TodoListModule = ({todoGroup, toggleDrawer}: any) => {\n    const classes = useStyles();\n    const [checked, setChecked] = React.useState([-1]);\n    let todoList: Array<TodoItem> = [];\n    const dispatch = useDispatch();\n\n    if (todoGroup) {\n        todoList = todoGroup[0].todoList;\n    }\n\n    const handleToggle = async (todoItem: TodoItem, value: number) => {\n        // const currentIndex = value;\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n        setChecked(newChecked);\n        todoItem.isFinished = !todoItem.isFinished;\n        await updateATodoItem(todoItem, dispatch)\n    };\n\n\n    return (\n        <Fragment>\n            <Card className={classes.card}>\n                <CardHeader\n                    title={\n                        <Typography align=\"center\" variant=\"h3\" style={{textTransform: 'capitalize'}}>\n                            {todoGroup[0].groupName}\n                        </Typography>\n                    }\n                />\n                <Divider/>\n                {todoList.length !== 0 && (\n                    <List className={classes.list}>\n                        {todoList.map((todoItem, index) => {\n                            return (\n                                <ListItem divider={index < todoList.length} key={todoItem._id}\n                                          button\n                                          onClick={() => {\n                                              showDetails(todoItem, dispatch);\n                                              toggleDrawer(true, todoItem);\n                                          }}>\n\n                                    <ListItemAvatar>\n                                        <Avatar>{index + 1}</Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={todoItem.title}\n                                        secondary={todoItem.subTitle ? todoItem.subTitle : '---'}\n                                        style={todoItem.isFinished ? {textDecorationLine: 'line-through'} : {}}\n                                    />\n                                    <ListItemSecondaryAction>\n                                        <Checkbox\n                                            edge=\"end\"\n                                            // onChange={handleToggle(todoItem._id, index)}\n                                            onChange={() => {\n                                                handleToggle(todoItem, index).then();\n                                            }}\n                                            checked={todoItem.isFinished}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })}\n                    </List>)}\n            </Card>\n        </Fragment>\n    )\n}\nexport default TodoListModule;","import {\n    Button,\n    Card, CardContent,\n    CardHeader, Divider, Grid,\n    InputAdornment,\n    SvgIcon, TextField, Typography\n} from \"@material-ui/core\";\nimport React, {Fragment, useEffect, useState} from \"react\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport {addATodoItem} from \"../../../redux/actions/todoItemAction\";\nimport {useDispatch} from \"react-redux\";\nimport {ShortText, Title} from \"@material-ui/icons\";\n\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        inputBox: {\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'start',\n            textAlign: 'center',\n            padding: '6px',\n        }, card: {\n            height: '95%',\n            backgroundColor: 'white'\n        }, btnGroup: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n        }\n    }),\n);\n\n\nconst AddNewTodoItemModule = ({todoGroup}: any) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());\n\n    let initialInputBox = {\n        title: '',\n        subTitle: '',\n        repeatCircle: '---',\n        scheduleAt: new Date().toISOString(),\n        description: '',\n        groupId: '',\n    }\n\n    const [newTodoItem, setNewTodoItem] = useState(initialInputBox);\n\n    const resetInputBox = () => {\n        setNewTodoItem({...initialInputBox,groupId: todoGroup._id})\n    }\n\n    useEffect(() => {\n        if (todoGroup !== undefined) {\n            setNewTodoItem({...newTodoItem, groupId: todoGroup._id})\n        }\n    }, [setNewTodoItem])\n\n    const buildOptions = () => {\n        const arr = [];\n        const repeatOptions = ['---', 'Once', 'Every day', 'Every week', 'Every month'];\n        for (const repeatOption of repeatOptions) {\n            arr.push(<option key={repeatOption} value={repeatOption}>{repeatOption}</option>)\n        }\n        return arr;\n    }\n\n    const handleDateChange = (date: Date | null) => {\n        setSelectedDate(date);\n        if (selectedDate !== null) {\n            setNewTodoItem({...newTodoItem, scheduleAt: selectedDate.toISOString()});\n        }\n    };\n\n    return (\n        <Fragment>\n            <Card className={classes.card}>\n                <CardHeader\n                    title={\n                        <Typography align=\"center\" variant=\"h3\">\n                            New TodoItem\n                        </Typography>\n                    }\n                />\n                <Divider/>\n                <CardContent>\n                    <Grid container>\n                        <div className={classes.inputBox}>\n                            <Grid container spacing={1}>\n                                <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                    <div>\n                                        <TextField required label=\"Title\" fullWidth InputProps={{\n                                            startAdornment: (\n                                                <InputAdornment position=\"start\">\n                                                    <SvgIcon fontSize=\"small\" color=\"action\"><Title/>\n                                                    </SvgIcon>\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                                   onChange={(event) => {\n                                                       setNewTodoItem({...newTodoItem, title: event.target.value});\n                                                   }}\n                                                   placeholder=\"Please input todo title\"\n                                                   variant=\"outlined\"\n                                                   value={newTodoItem.title}\n                                        />\n                                    </div>\n                                </Grid>\n                                <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                    <div>\n                                        <TextField label=\"SubTitle\" fullWidth InputProps={{\n                                            startAdornment: (\n                                                <InputAdornment position=\"start\">\n                                                    <SvgIcon fontSize=\"small\" color=\"action\"><ShortText/>\n                                                    </SvgIcon>\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                                   onChange={(event) => {\n                                                       setNewTodoItem({\n                                                           ...newTodoItem,\n                                                           subTitle: event.target.value\n                                                       });\n                                                   }}\n                                                   placeholder=\"Input the subTitle\"\n                                                   variant=\"outlined\"\n                                                   value={newTodoItem.subTitle}\n                                        />\n                                    </div>\n                                </Grid>\n                                <Grid item xl={4} lg={4} md={4} sm={6} xs={6}>\n                                    <TextField\n                                        select\n                                        required\n                                        margin=\"normal\"\n                                        label=\"Repeat\"\n                                        value={newTodoItem.repeatCircle}\n                                        // onChange={handleYearChange}\n                                        onChange={(event) => {\n                                            setNewTodoItem({...newTodoItem, repeatCircle: event.target.value});\n                                        }}\n                                        SelectProps={{\n                                            native: true,\n                                        }}\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        defaultValue=\"Default Value\"\n                                        fullWidth\n                                    >\n                                        {buildOptions()}\n                                    </TextField>\n                                </Grid>\n\n                                <Grid item xl={4} lg={4} md={4} sm={6} xs={6}>\n                                    <KeyboardDatePicker\n                                        disableToolbar\n                                        variant=\"inline\"\n                                        format=\"MM/dd/yyyy\"\n                                        margin=\"normal\"\n                                        id=\"date-picker-inline\"\n                                        label=\"Date picker inline\"\n                                        value={selectedDate}\n                                        onChange={handleDateChange}\n                                        KeyboardButtonProps={{\n                                            'aria-label': 'change date',\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xl={4} lg={4} md={4} sm={6} xs={6}>\n                                    <KeyboardTimePicker\n                                        margin=\"normal\"\n                                        id=\"time-picker\"\n                                        label=\"Time picker\"\n                                        value={selectedDate}\n                                        onChange={handleDateChange}\n                                        KeyboardButtonProps={{\n                                            'aria-label': 'change time',\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                    <TextField\n                                        id=\"outlined-multiline-flexible\"\n                                        label=\"Description\"\n                                        multiline\n                                        fullWidth\n                                        rows={6}\n                                        placeholder=\"Write a description here\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        onChange={(event) => {\n                                            setNewTodoItem({...newTodoItem, description: event.target.value});\n                                        }}\n                                        value={newTodoItem.description}\n                                        defaultValue=\"\"\n                                        variant=\"outlined\"\n                                    /></Grid>\n                                <Grid item xl={12} lg={12} sm={12} xs={12}>\n                                    <div className={classes.btnGroup}>\n                                        <Button variant=\"contained\" color=\"primary\" type=\"submit\"\n                                                onClick={() => {\n                                                    addATodoItem(newTodoItem, dispatch).then();\n                                                    resetInputBox();\n                                                }}\n                                                value=\"Submit\"\n                                                style={{\n                                                    textTransform: 'none',\n                                                    marginTop: \"10px\"\n                                                }}>Add New</Button>\n                                        <Button variant=\"contained\" color=\"inherit\" type=\"reset\"\n                                                onClick={() => {resetInputBox();}}\n                                                style={{\n                                                    textTransform: 'none',\n                                                    marginTop: \"10px\"\n                                                }}>Clear Form</Button>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                </CardContent>\n            </Card>\n        </Fragment>\n    )\n};\n\nexport default AddNewTodoItemModule;","import {\n    Button,\n    Card, CardContent,\n    CardHeader, Divider, Grid,\n    InputAdornment,\n    SvgIcon, TextField, Typography\n} from \"@material-ui/core\";\nimport React, {Fragment, useState} from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {useDispatch} from \"react-redux\";\nimport {deleteATodoItem, TodoItem, updateATodoItem} from \"../../../redux/actions/todoItemAction\";\nimport {KeyboardDatePicker, KeyboardTimePicker} from \"@material-ui/pickers\";\nimport {ShortText, Title} from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        inputBox: {\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'start',\n            textAlign: 'center',\n            padding: '6px',\n        }, card: {\n            height: '95%',\n            backgroundColor: 'white'\n        }, btnGroup: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n        }\n    }),\n);\n\n\nconst TodoItemDetailsModule = ({todoItemDetail, toggleDrawer}: any) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [selectedDate, setSelectedDate] = useState<Date | null>(new Date(todoItemDetail.scheduleAt));\n    const [updateTodoItem, setUpdateTodoItem] = useState<TodoItem>(todoItemDetail)\n\n    const buildOptions = () => {\n        const arr = [];\n        const repeatOptions = ['---', 'Once', 'Every day', 'Every week', 'Every month'];\n        for (const repeatOption of repeatOptions) {\n            arr.push(<option key={repeatOption} value={repeatOption}>{repeatOption}</option>)\n        }\n        return arr;\n    }\n\n    const handleDateChange = (date: Date | null) => {\n        setSelectedDate(date);\n        if (selectedDate !== null) {\n            setUpdateTodoItem({...updateTodoItem, scheduleAt: selectedDate.toISOString()});\n        }\n    };\n\n    return (\n        <Fragment>\n            {(\n                <Card className={classes.card}>\n                    <CardHeader\n                        title={\n                            <Typography align=\"center\" variant=\"h3\">\n                                Todos details\n                            </Typography>\n                        }\n                    />\n                    <Divider/>\n                    <CardContent>\n                        <Grid container>\n                            <div className={classes.inputBox}>\n                                <Grid container spacing={1}>\n                                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                        <TextField required label=\"Title\" fullWidth InputProps={{\n                                            startAdornment: (\n                                                <InputAdornment position=\"start\">\n                                                    <SvgIcon fontSize=\"small\" color=\"action\"><Title/>\n                                                    </SvgIcon>\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                                   onChange={(event) => {\n                                                       setUpdateTodoItem({...updateTodoItem, title: event.target.value})\n                                                   }}\n                                                   placeholder={updateTodoItem.title}\n                                                   variant=\"outlined\"\n                                                   value={updateTodoItem.title}\n                                        />\n                                    </Grid>\n                                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                        <TextField label=\"SubTitle\" fullWidth InputProps={{\n                                            startAdornment: (\n                                                <InputAdornment position=\"start\">\n                                                    <SvgIcon fontSize=\"small\" color=\"action\"><ShortText/>\n                                                    </SvgIcon>\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                                   onChange={(event) => {\n                                                       setUpdateTodoItem({\n                                                           ...updateTodoItem,\n                                                           subTitle: event.target.value\n                                                       })\n                                                   }}\n                                                   placeholder=\"Input the subTitle\"\n                                                   variant=\"outlined\"\n                                                   value={updateTodoItem.subTitle}\n                                        />\n                                    </Grid>\n                                    <Grid item xl={4} lg={4} md={4} sm={6} xs={6}>\n                                        <TextField\n                                            select\n                                            required\n                                            margin=\"normal\"\n                                            label=\"Repeat\"\n                                            value={updateTodoItem.repeatCircle}\n                                            // onChange={handleYearChange}\n                                            onChange={(event) => {\n                                                setUpdateTodoItem({\n                                                    ...updateTodoItem,\n                                                    repeatCircle: event.target.value\n                                                });\n                                            }}\n                                            SelectProps={{\n                                                native: true,\n                                            }}\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            defaultValue=\"Default Value\"\n                                            fullWidth\n                                        >\n                                            {buildOptions()}\n                                        </TextField>\n                                    </Grid>\n                                    <Grid item xl={4} lg={4} md={4} sm={6} xs={6}>\n                                        <KeyboardDatePicker\n                                            disableToolbar\n                                            variant=\"inline\"\n                                            format=\"MM/dd/yyyy\"\n                                            margin=\"normal\"\n                                            id=\"date-picker-inline\"\n                                            label=\"Date picker inline\"\n                                            value={selectedDate}\n                                            onChange={handleDateChange}\n                                            KeyboardButtonProps={{\n                                                'aria-label': 'change date',\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item xl={4} lg={4} md={4} sm={6} xs={6}>\n                                        <KeyboardTimePicker\n                                            margin=\"normal\"\n                                            id=\"time-picker\"\n                                            label=\"Time picker\"\n                                            value={selectedDate}\n                                            onChange={handleDateChange}\n                                            KeyboardButtonProps={{\n                                                'aria-label': 'change time',\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                        <TextField\n                                            id=\"outlined-multiline-flexible\"\n                                            label=\"Description\"\n                                            multiline\n                                            fullWidth\n                                            rows={6}\n                                            placeholder=\"Write a description here\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            onChange={(event) => {\n                                                setUpdateTodoItem({...updateTodoItem, description: event.target.value});\n                                            }}\n                                            value={updateTodoItem.description}\n                                            defaultValue=\"\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item xl={12} lg={12} sm={12} xs={12}>\n                                        <div className={classes.btnGroup}>\n                                            <Button variant=\"contained\" color=\"primary\" type=\"submit\"\n                                                    value=\"Submit\"\n                                                    onClick={() => {\n                                                        updateATodoItem(updateTodoItem, dispatch).then();\n                                                        toggleDrawer(false);\n                                                    }}\n                                                    style={{\n                                                        textTransform: 'none',\n                                                        marginTop: \"10px\"\n                                                    }}>Update</Button>\n                                            <Button variant=\"contained\" color=\"secondary\"\n                                                    onClick={() => {\n                                                        deleteATodoItem(updateTodoItem._id, dispatch).then()\n                                                        toggleDrawer(false);\n                                                    }}\n                                                    style={{\n                                                        textTransform: 'none',\n                                                        marginTop: \"10px\"\n                                                    }}>Delete</Button>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Grid>\n                    </CardContent>\n                </Card>\n            )}\n        </Fragment>\n    )\n}\nexport default TodoItemDetailsModule;","import {makeStyles, Theme, createStyles} from \"@material-ui/core/styles\";\nimport {useSelector} from \"react-redux\";\nimport {AppState} from \"../../../redux/store/AppState\";\nimport React from \"react\";\nimport {Grid, SwipeableDrawer,} from \"@material-ui/core\";\nimport TodoListModule from \"./TodoListModule\";\nimport AddNewTodoItemModule from \"./AddNewTodoItemModule\";\nimport {Navigate, useParams} from \"react-router-dom\";\nimport TodoItemDetailsModule from \"./TodoItemDetailsModule\";\nimport {TodoGroup} from \"../../../redux/reducers/TodoReducer\";\nimport {TodoItem} from \"../../../redux/actions/todoItemAction\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        pageContent: {\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            textAlign: 'center',\n            position: 'relative',\n        }, mainComponent: {\n            width: '85%',\n            height: '100vh',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            textAlign: 'center',\n        }, leftPart: {\n            width: '100%',\n            height: '90%',\n            padding: theme.spacing(1),\n        }, rightPart: {\n            width: '100%',\n            height: '90%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'start',\n            padding: theme.spacing(1),\n        },\n        cards: {\n            height: '95vh',\n        },\n        list: {\n            width: 500,\n        },\n        paddingBox: {\n            height: '64px',\n            backgroundColor: 'black'\n        },\n        itemDetailBox: {\n            padding: theme.spacing(1),\n            height: '95vh',\n        }\n    }),\n);\n\nconst TodoListLayout = () => {\n    const {todoGroups} = useSelector((state: AppState) => state.todo);\n    const [openDrawer, setOpenDrawer] = React.useState(false);\n    const [todoItemDetail, setTodoItemDetail] = React.useState({});\n    const params = useParams();\n\n    const classes = useStyles();\n\n    const todoGroup = todoGroups.filter((todoGroup: TodoGroup) => {\n        return todoGroup._id === params.id;\n    })\n\n    if (todoGroup === null) {\n        return <Navigate to=\"/404\"/>;\n    }\n\n\n    const toggleDrawer = (open: boolean, todoItem?: TodoItem) => {\n        setOpenDrawer(open)\n        if (todoItem !== undefined) {\n            setTodoItemDetail(todoItem)\n        }\n    };\n\n    const showDetails = () => (\n        <div className={classes.list} role=\"presentation\"\n        >\n            <div className={classes.paddingBox}/>\n            <div className={classes.itemDetailBox}>\n                <TodoItemDetailsModule todoItemDetail={todoItemDetail} toggleDrawer={toggleDrawer}/>\n            </div>\n        </div>\n    )\n\n\n    return (\n        <div>\n            <div className={classes.pageContent}>\n                <div className={classes.mainComponent}>\n                    <div className={classes.leftPart}>\n                        <Grid container spacing={2}>\n                            <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                <div className={classes.cards}>\n                                    <TodoListModule todoGroup={todoGroup}\n                                                    toggleDrawer={toggleDrawer}/>\n                                </div>\n                            </Grid>\n\n                        </Grid>\n                    </div>\n                    <div className={classes.rightPart}>\n                        <Grid container spacing={1}>\n                            <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                <div>\n                                    <AddNewTodoItemModule todoGroup={todoGroup[0]}/>\n                                </div>\n                            </Grid>\n                            <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                <div>\n                                    {/*<TodoItemDetailsModule todoGroup={todoGroup[0]}/>*/}\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </div>\n\n                </div>\n            </div>\n            <div>\n                <SwipeableDrawer\n                    anchor='right'\n                    open={openDrawer}\n                    onClose={(event: React.KeyboardEvent | React.MouseEvent) => {\n                        if (event && event.type === 'keydown' && ((event as React.KeyboardEvent).key === 'Tab' ||\n                            (event as React.KeyboardEvent).key === 'Shift')\n                        ) {\n                            return;\n                        } else {\n                            toggleDrawer(false)\n                        }\n                    }}\n                    onOpen={() => toggleDrawer(true)}\n                >\n                    {showDetails()}\n                </SwipeableDrawer>\n            </div>\n        </div>\n\n    )\n}\nexport default TodoListLayout;","import DashboardLayout from \"../layout/DashboardLayout\";\nimport LandingPageLayout from \"../layout/LandingPageLayout\";\nimport WelcomePage from \"../../views/auth/WelcomePage\";\nimport LoginPage from \"../../views/auth/LoginPage\";\nimport RegisterPage from \"../../views/auth/RegisterPage\";\nimport {Navigate} from 'react-router-dom';\n\nimport TodoGroupsManage from \"../../views/todos/todoGroup/TodoGroupsManage\";\nimport UserAccount from \"../../views/account/UserAccount\";\nimport PageNotFound from \"../../views/utilpages/PageNotFound\";\nimport UserSettings from \"../../views/account/UserSettings\";\nimport HelpPage from \"../../views/utilpages/HelpPage\";\nimport TodoListLayout from \"../../views/todos/todoList/TodoListLayout\";\n\nconst routes = [\n    {\n        path: '/',\n        element: <LandingPageLayout/>,\n        children: [\n            {path: '/', element: <WelcomePage/>},\n            {path: 'login', element: <LoginPage/>},\n            {path: 'register', element: <RegisterPage/>},\n            {path: '*', element: <PageNotFound/>}\n        ]\n    },\n    {\n        path: '/app',\n        element: <DashboardLayout/>,\n        children: [\n            {path: \"/homepage/group/:id\", element: <TodoListLayout/>},\n            {path: '/homepage/group/add', element: <TodoGroupsManage/>},\n            {path: '/homepage/user/account', element: <UserAccount/>},\n            {path: '/homepage/user/settings', element: <UserSettings/>},\n            {path: '/homepage/help', element: <HelpPage/>},\n            {path: '/*', element: <Navigate to=\"/404\"/>}\n        ]\n    }\n\n]\n\nexport default routes;","import {useSelector} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport {useSnackbar} from 'notistack';\nimport {messageObj} from \"../../redux/actions/MessageAction\";\nimport {AppState} from \"../../redux/store/AppState\";\n\nconst Message = () => {\n    const _messages = useSelector((state: AppState) => state.messages);\n    const messages: Array<messageObj> = _messages ? _messages['messageArray'] : [];\n    const {enqueueSnackbar} = useSnackbar();\n\n\n    useEffect(() => {\n        messages !== null && messages.length > 0 &&\n        messages.map((item: messageObj, index) => (enqueueSnackbar(item.message, {\n            variant: item.alertType,\n            preventDuplicate: true,\n        })))\n    }, [messages, enqueueSnackbar])\n\n    return null\n\n}\n\n\nexport default Message;","import './App.css';\nimport React, {useEffect} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport {useRoutes} from 'react-router-dom';\nimport routes from './components/routes/routes';\nimport {theme} from \"./theme/myTheme\";\nimport {ThemeProvider} from \"@material-ui/core/styles\";\nimport {loadUser} from \"./redux/actions/authAction\";\nimport {setHttpReqHeaderWithToken} from \"./utils/setHttpReqHeader\";\nimport {MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport Message from \"./components/layout/Message\";\n\n\nif (localStorage.token) {\n    setHttpReqHeaderWithToken(localStorage.token);\n}\n\nconst App = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (localStorage.token) {\n            loadUser(dispatch).then();\n        }\n    }, [dispatch]);\n\n    const routingPath = useRoutes(routes);\n    return (\n        <ThemeProvider theme={theme}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Message/>\n                {routingPath}\n            </MuiPickersUtilsProvider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {myAction} from \"../../utils/actionType\";\nimport {\n    AUTH_ERROR,\n    LOG_OUT,\n    LOGIN_SUCCESS,\n    REGISTER_FAIL,\n    REGISTER_SUCCESS,\n    USER_PROFILE_LOADED\n} from \"../actions/types\";\n\nexport interface AuthInfo {\n    token: string | null,\n    isAuthed: boolean,\n    loading: boolean,\n    userInfo: {\n        profile: {\n            todoGroups: Array<any>,\n            _id: string | undefined,\n            email: string | undefined,\n            username: string | undefined,\n            avatar: string | undefined\n        }\n    },\n}\n\nconst initialAuthState = {\n    token: localStorage.getItem(\"token\"),\n    isAuthed: false,\n    loading: true,\n    userInfo: {\n        profile: {\n            todoGroups: [],\n            _id: undefined,\n            email: undefined,\n            username: undefined,\n            avatar: undefined\n        }\n    },\n}\n\n\nexport const AuthReducer = (state: AuthInfo | null = initialAuthState, action: myAction) => {\n    switch (action.type) {\n        case USER_PROFILE_LOADED:\n            return {\n                ...state,\n                isAuthed: true,\n                loading: false,\n                userInfo: action.payload.userInfo,\n                token: action.payload.token\n            }\n        case LOGIN_SUCCESS:\n            localStorage.setItem(\"token\", action.payload.token)\n            return {\n                ...state,\n                token: action.payload.token,\n                isAuthed: true,\n                loading: false,\n                userInfo: action.payload.userInfo\n            }\n        case REGISTER_SUCCESS:\n            return {\n                ...state,\n            }\n        case LOG_OUT:\n            localStorage.removeItem(\"token\")\n            return {\n                ...state,\n                token: null,\n                isAuthed: false,\n                loading: true,\n                userInfo: {}\n            }\n        case REGISTER_FAIL:\n        case AUTH_ERROR:\n        default:\n            return {\n                ...state,\n            }\n    }\n}","import {myAction} from \"../../utils/actionType\";\nimport {\n    CLEAR_TODO,\n    DELETE_A_GROUP, TODO_ADD_SUCCESS, TODO_GROUP_ADD_ERROR, TODO_GROUP_ADD_SUCCESS,\n    TODO_INFO_LOADED,\n    TODO_UPDATE_ERROR,\n    TODO_UPDATE_SUCCESS,\n    UPDATE_DETAILS\n} from \"../actions/types\";\nimport {TodoItem} from \"../actions/todoItemAction\";\n\n\nexport interface TodoGroup {\n    todoList: Array<TodoItem>,\n    _id: string | undefined,\n    owner: string | undefined,\n    groupName: string | undefined,\n    todoItemDetails: TodoItem | undefined,\n}\n\nexport interface TodoGroups {\n    todoGroups: Array<TodoGroup>,\n}\n\nconst initialTodoGroupsState = {\n    todoGroups: [],\n}\n\nexport const TodoReducer = (state: TodoGroups = initialTodoGroupsState, action: myAction) => {\n    switch (action.type) {\n        case TODO_INFO_LOADED: {\n            return {\n                ...state,\n                todoGroups: action.payload.todoGroups\n            }\n        }\n        case TODO_UPDATE_SUCCESS: {\n            const updatedTodoItem = action.payload.updatedTodoItem;\n            const newTodoGroups = state.todoGroups.map((todoGroup, index) => {\n                if (todoGroup._id !== updatedTodoItem.group) {\n                    return todoGroup\n                } else {\n                    const newTodoList = todoGroup.todoList.map((todoItem, index) => {\n                        if (todoItem._id !== updatedTodoItem._id) {\n                            return todoItem\n                        } else {\n                            return updatedTodoItem\n                        }\n                    })\n                    return {...todoGroup, todoList: newTodoList}\n                }\n            })\n            return {\n                ...state,\n                todoGroups: newTodoGroups\n            }\n        }\n        case CLEAR_TODO:\n            return {\n                ...state,\n                todoGroups: [],\n            }\n        case UPDATE_DETAILS:\n            return {\n                ...state,\n                todoItemDetails: action.payload,\n            }\n        case DELETE_A_GROUP:\n            return {\n                ...state,\n                todoGroups: state.todoGroups.filter((todoGroup) => todoGroup !== action.payload)\n            }\n        case TODO_ADD_SUCCESS:\n        case TODO_UPDATE_ERROR:\n        case TODO_GROUP_ADD_SUCCESS:\n        case TODO_GROUP_ADD_ERROR:\n        default:\n            return {\n                ...state,\n            }\n    }\n}","import {addMsgAction, closeMsgAction, messageObj} from \"../actions/MessageAction\";\n\nexport interface messageState {\n    messageArray: Array<addMsgAction[\"payload\"]>;\n}\n\nconst initialMessageState = {\n    messageArray: [],\n}\n\nexport const MessageReducer = (state: messageState = initialMessageState, action: addMsgAction | closeMsgAction) => {\n    const {type, payload} = action;\n    switch (type) {\n        case \"ADD_MESSAGE\":\n            return {\n                ...state,\n                messageArray: [...state.messageArray, payload],\n            }\n        case \"REMOVE_MESSAGE\":\n            return {\n                ...state,\n                messageArray: state.messageArray.filter((msgObj: messageObj) => {\n                    return msgObj.id !== payload;\n                })\n            }\n        default:\n            return state\n    }\n}","import {combineReducers} from \"redux\";\nimport {AuthReducer} from \"../reducers/AuthReducer\";\nimport {TodoReducer} from \"../reducers/TodoReducer\";\nimport {MessageReducer} from \"../reducers/MessageReducer\";\n// import the combineReducers func from redux to combine/integrate all reducers used in the application\nexport const rootReducer = combineReducers({\n    auth: AuthReducer,\n    todo: TodoReducer,\n    messages: MessageReducer\n})\n\nexport type AppState = ReturnType<typeof rootReducer>","import {createStore} from \"redux\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {rootReducer} from \"./AppState\";\n\nconst initialState = {}\n\n//create the state store to fix the usage of redux.\n//rootReducer is the combination of all reducer in this application\n//we need to set up an initial/startup state for the application\n//And the devtools is a connector for the browser's dev tools\n// const configureStore = () => {\n//     return createStore(rootReducer, initialState, composeWithDevTools());\n// }\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools()\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/store/configureStore\";\nimport {SnackbarProvider} from \"notistack\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <SnackbarProvider maxSnack={5}>\n                    <App/>\n                </SnackbarProvider>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}